akka {
  loglevel = DEBUG

  routes {
    # If ask takes more time than this to complete the request is failed
    ask-timeout = 5s
  }

  actor {
    provider = cluster

    serialization-bindings {
      "com.telegraft.rafktor.CborSerializable" = jackson-cbor
    }
  }
  #management-config
  management {
    cluster.bootstrap {
      contact-point-discovery {
        # pick the discovery method you'd like to use:
        discovery-method = kubernetes-api

        #required-contact-point-nr = ${REQUIRED_CONTACT_POINT_NR}
      }
    }
  }

  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  # use JDBC plugin to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "jdbc-journal"
    auto-start-journals = ["jdbc-journal"]

    snapshot-store.plugin = "jdbc-snapshot-store"
    auto-start-snapshot-stores = ["jdbc-snapshot-store"]
  }

  projection {
    jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size = 10
    jdbc.dialect = postgres-dialect
  }

}

akka-persistence-jdbc {
  shared-databases {
    slick {
      profile = "slick.jdbc.PostgresProfile$"
      db {
        dataSourceClass = "slick.jdbc.DriverDataSource"
        properties = {
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://"${DB_SERVER}":"${DB_PORT}"/"${DB_NAME}""
          user = ${DB_USER}
          password = ${DB_PASS}
        }
      }
    }
  }
}

jdbc-journal {
  use-shared-db = "slick"
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  use-shared-db = "slick"
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  use-shared-db = "slick"
}

# the akka-persistence-jdbc provider in use for durable state store
jdbc-durable-state-store {
  use-shared-db = "slick"
}
