@startuml

skinparam groupInheritance 2

package com.telegraft.rafktor {

  namespace Log {
    class LogEntry
  }

  class Log {
    + logEntries: Vector[LogEntry]
    + Log(logEntries: Vector[LogEntry]): Log
    + apply(index: Int): LogEntry
    + length(): Int
    + lastLogTerm(): Long
    + appendEntries(newEntries: Log, prevLogIndex: Int): Log
    {static} + empty(): Log
  }

  namespace RaftState {
    interface RaftState {
      Log: LogEntry[]
      currentTerm: Long
      votedFor: Option<String>
      log: Log
      commitIndex: Long
      lastApplied: Long

      + applyEvent(state: RaftState, event: Event): RaftState

    }
    class Leader {
      + matchIndex: Map[String, Long]
      + nextIndex: Map[String, Long]
    }
    class Follower
    class Candidate
  }

  class Configuration {
    - servers: Set[String]
    + Configuration(servers: Set[String]): Configuration
    + getConfiguration(): Set[String]
    + getServer(server: String): String
  }

  interface Server

  namespace StateMachine {
    interface Command
  }

  class StateMachine << (S,#FF7700) Singleton >> {
    {static} +apply(): Behavior[Command]
  }

  namespace RaftServer {
    interface Command
    interface Event
  }

  class RaftServer << (S,#FF7700) Singleton >> {
    {static} +apply(serverId: String, stateMachine: ActorRef[StateMachine.Command], config: Configuration) : Behavior[Command]
    {static} - commandHandler(config: Configuration, stateMachine: ActorRef[StateMachine.Command]): ReplyEffect[Event, RaftState]
  }

}


RaftServer ......> RaftState.RaftState: contains >
RaftServer "0..*" ..> "1" RaftServer.Command: < is received by
RaftServer "0..*" ..> "1" RaftServer.Event: < is produced by
RaftServer "0..*" ..> "1" Server: sends messages to >
RaftServer "1" ..> Configuration: holds >
RaftServer "1" ..> StateMachine: sends messages to >

Log.LogEntry "1" --o "0..*" Log

StateMachine "0..*"..>"1" StateMachine.Command: Received by <

RaftState.RaftState <|-- RaftState.Leader
RaftState.RaftState <|-- RaftState.Follower
RaftState.RaftState <|-- RaftState.Candidate

RaftState.Leader "0..*"..> "1" RaftServer.Event: consumes >
RaftState.Follower "0..*"..>"1" RaftServer.Event: consumes >
RaftState.Candidate "0..*"..>"1" RaftServer.Event: consumes >

RaftState.Leader o-- Log: contains >
RaftState.Follower o-- Log: contains >
RaftState.Candidate o-- Log: contains >

Configuration o-- Server



@enduml