syntax = "proto3";

import "TelegraftStateMachine.proto";

option java_multiple_files = true;
option java_package = "com.telegraft.rafktor.proto";

package com.telegraft.rafktor;

message LogEntryPayload {
  oneof payload {
    statemachine.CreateUserRequest createUser = 1;
    statemachine.SendMessageRequest sendMessage = 2;
    statemachine.CreateChatRequest createChat = 3;
    statemachine.JoinChatRequest joinChat = 4;
    statemachine.GetMessagesRequest getMessage = 5;

  }
}

// LogEntry contains a raft log entry.
message LogEntry {
  // Index holds the index of the log entry.
  // Term holds the election term of the log entry.
  uint64 term = 2;
  // Type holds the type of the log entry.
  LogEntryPayload type = 3;

}

// AppendEntriesRequest maps to the raft AppendEntries RPC.
message AppendEntriesRequest {
  // Term is the current election term.
  uint64 term = 1;
  // Leader is the current leader id.
  string leaderId = 2;
  // PrevLogEntry is the previous log entry.
  uint64 prev_log_entry = 3;
  // PrevLogTerm is the previous log term.
  uint64 prev_log_term = 4;
  // Entries are the new log entries to commit.
  repeated LogEntry entries = 5;
  // LeaderCommitIndex is the commit index on the leader.
  uint64 leader_commit_index = 6;

}

// AppendEntriesResponse is the response to the AppendEntries RPC request.
message AppendEntriesResponse {
  // Term is the newer term if the leader is out of date.
  uint64 term = 1;
  // Success will be false if we have a conflicting entry.
  bool success = 2;

}

// RequestVoteRequest is the command used by a candidate to ask a Raft peer for a vote in an election.
message RequestVoteRequest {
  // Term is the new voting term.
  uint64 term = 1;
  // Candidate is the candidate id
  string candidateId = 2;
  // LastLogIndex is the last log index.
  uint64 last_log_index = 3;
  // LastLogTerm is the last log term.
  uint64 last_log_term = 4;

}

// RequestVoteResponse is the response returned from a RequestVoteRequest.
message RequestVoteResponse {
  // Term is the newer term if the leader is out of date.
  uint64 term = 1;

  // Granted if the vote was granted.
  bool granted = 2;

}

// AppendEntriesPipelineResponse is the wrapper of an AppendEntriesResponse in a pipeline.
message AppendEntriesPipelineResponse {
  // Error is any potential error.
  string error = 1;
  // Response is the response object if necessary
  AppendEntriesResponse response = 2;
}

// RaftService implements the raft pipelining receiver.
service TelegraftRaftService {

  // AppendEntries performs a single append entries request / response.
  rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse) {}
  // RequestVote is the command used by a candidate to ask a Raft peer for a vote in an election.
  rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse) {}

}